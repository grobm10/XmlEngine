<?php/**   * @author 		David Curras * @version		June 6, 2012 */require_once '../siteConfig.php';require_once '../Utils/Bootstrap.php';ini_set('display_errors', 'Off');ini_set('display_startup_errors', 'Off');Bootstrap::SetRequiredFiles();AbstractModel::$IsUsingUtf8 = true;$partners = PartnerModel::FetchAll();$toRename = array();foreach($partners as $partner){	$list = getFileList($partner->getName());	$toRename = array_merge($toRename, checkNamingConvention($list));}if(!empty($toRename)){	$content = createMail($toRename);	echo $content;	$subject = 'XmlEngine mailing ('.date("F j, Y", time()).')';	$mail = new Mail('XmlEngine@166.77.22.72', '---', $content, $subject);	$sent = $mail->send();	moveFiles($toRename);}die();function getFileList($partnerName){	$folders = array(		LOCAL_INBOX_MERGE.strtolower($partnerName).'dto/', 		LOCAL_INBOX_CONVERSION.strtolower($partnerName).'dto/', 		LOCAL_INBOX_TRANSPORTATION.strtolower($partnerName).'dto/'	);	$list = array();	for($i=0; $i < count($folders); $i++){		$folder = $folders[$i];		$extensions = unserialize(VIDEO_FILE_EXTENSIONS);		$extensions[] = 'xml';		if(($i == 2) && (strtolower($partnerName) == 'itunes')){			$extensions = array('itmsp'); //For itunes transportation just look for itmsp files		}		$list[$folder] = File::GetFilesList($folder, $extensions);	}	return $list;}function checkNamingConvention($list){	$toRename = array();	foreach($list as $folder => $files){		foreach($files as $file){			$genericName = File::GetNameWithoutExtension($file);			$info = AbstractController::ParseFileName($genericName, false);			if(is_string($info)){				$toRename[$file] = $info;			}		}	}	return $toRename;}function createMail($list){	$html = '<b style="text-align:center;">This is a list of XmlEngine files that does not match the naming convention:</b><br /><br />';	$html .= '<ul>';	foreach($list as $path => $errors){		$path = htmlentities(utf8_decode(trim($path)), ENT_COMPAT, 'UTF-8', false);		$html .= '<li style="list-style:circle;">'.$path.'</li>';	}	$html .= '</ul>';	$html .= '<b><i>All files are being moved to the "rename" folder.</i></b>';	return $html;}function moveFiles($list){	foreach($list as $path => $errors){		$newPath = str_replace(LOCAL_INBOX, LOCAL_RENAME, $path);		//echo 'rename('.$path.', '.$newPath.')<br />';		rename($path, $newPath);	}}