<?php

/**
 * @author			David Curras
 * @version			June 6, 2012
 * @filesource		/Utils/Math/Geometry.php
 */
class Geometry
{
	
	/**
	 * Calculates the distance between two points using the Pythagorean theorem
	 *
	 * @param		GeometricPoint		$point1
	 * @param		GeometricPoint		$point2
	 * @return		float
	 * @static
	 */
	public static function getDistance($point1, $point2) {
		$deltaX = abs(floatval($point2->getX()) - floatval($point1->getX()));
		$deltaY = abs(floatval($point2->getY()) - floatval($point1->getY()));
		return sqrt(pow($deltaX, 2) + pow($deltaY, 2));
	}

	/**
	 * Calculates the angle from the slope of the line generated by two given points
	 *
	 * @param		GeometricPoint		$point1
	 * @param		GeometricPoint		$point2
	 * @return		float
	 * @static
	 */
	public static function getAngle($point1, $point2) {
		$deltaX = floatval($point2->getX()) - floatval($point1->getX());
		$deltaY = floatval($point2->getY()) - floatval($point1->getY());
		$angle = 0;
		if(abs($deltaX) > 0.000001){
			$slope = $deltaY / $deltaX;
			//Get the degrees from the slope of the line
			$angle = rad2deg(atan($slope));
		} else {
			$angle = 90;
		}
		//If the $point2 is in the 2nd or 3rd quadrant adds 180 degrees
		if($deltaX < 0){
			$angle += 180;
		}
		return $angle;
	}

	/**
	 * Calculates a new point in the plane, moving the original point
	 * with the given angle and distance values
	 *
	 * @param		GeometricPoint		$point
	 * @param		float				$angle
	 * @param		float				$distance
	 * @return		float
	 * @static
	 */
	public static function movePoint($point, $angle, $distance) {
		$deltaX = $distance * cos(deg2rad(floatval($angle)));
		$deltaY = $distance * sin(deg2rad(floatval($angle)));
		$newXPosition = floatval($point->getX()) + $deltaX;
		$newYPosition = floatval($point->getY()) + $deltaY;
		$newPoint = new GeometricPoint($newXPosition, $newYPosition);
		return $newPoint;
	}

	/**
	 * Moves the original point in the plane with the requested distance
	 * over a straight line to the destination point. 
	 *
	 * @param		GeometricPoint		$originalPoint
	 * @param		GeometricPoint		$destinationPoint
	 * @param		float				$distance
	 * @return		float
	 * @static
	 */
	public static function movePointTo($originalPoint, $destinationPoint, $distance) {
		$angle = self::getAngle($originalPoint, $destinationPoint);
		return self::movePoint($originalPoint, $angle, $distance);
	}
}